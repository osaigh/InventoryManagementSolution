//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestApp.OrderServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/InventoryServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestApp.OrderServiceRef.OrderDetail[] OrderDetailsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerIdField, value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestApp.OrderServiceRef.OrderDetail[] OrderDetails {
            get {
                return this.OrderDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderDetailsField, value) != true)) {
                    this.OrderDetailsField = value;
                    this.RaisePropertyChanged("OrderDetails");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderDetail", Namespace="http://schemas.datacontract.org/2004/07/InventoryServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class OrderDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIdField, value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="OrderServiceRef.IOrderService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/CreateOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/CreateOrderResponse")]
        TestApp.OrderServiceRef.Order CreateOrder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/CreateOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/CreateOrderResponse")]
        System.Threading.Tasks.Task<TestApp.OrderServiceRef.Order> CreateOrderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/DeleteOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/DeleteOrderResponse")]
        bool DeleteOrder(string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/DeleteOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/DeleteOrderResponse")]
        System.Threading.Tasks.Task<bool> DeleteOrderAsync(string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/AddProductQuantityToOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/AddProductQuantityToOrderResp" +
            "onse")]
        bool AddProductQuantityToOrder(string productId, int quantity, string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/AddProductQuantityToOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/AddProductQuantityToOrderResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> AddProductQuantityToOrderAsync(string productId, int quantity, string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/RemoveProductFromOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/RemoveProductFromOrderRespons" +
            "e")]
        bool RemoveProductFromOrder(string productId, string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/RemoveProductFromOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/RemoveProductFromOrderRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> RemoveProductFromOrderAsync(string productId, string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/SaveOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/SaveOrderResponse")]
        bool SaveOrder(TestApp.OrderServiceRef.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IOrderService/SaveOrder", ReplyAction="http://Microsoft.ServiceModel.Samples/IOrderService/SaveOrderResponse")]
        System.Threading.Tasks.Task<bool> SaveOrderAsync(TestApp.OrderServiceRef.Order order);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : TestApp.OrderServiceRef.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<TestApp.OrderServiceRef.IOrderService>, TestApp.OrderServiceRef.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestApp.OrderServiceRef.Order CreateOrder() {
            return base.Channel.CreateOrder();
        }
        
        public System.Threading.Tasks.Task<TestApp.OrderServiceRef.Order> CreateOrderAsync() {
            return base.Channel.CreateOrderAsync();
        }
        
        public bool DeleteOrder(string orderId) {
            return base.Channel.DeleteOrder(orderId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteOrderAsync(string orderId) {
            return base.Channel.DeleteOrderAsync(orderId);
        }
        
        public bool AddProductQuantityToOrder(string productId, int quantity, string orderId) {
            return base.Channel.AddProductQuantityToOrder(productId, quantity, orderId);
        }
        
        public System.Threading.Tasks.Task<bool> AddProductQuantityToOrderAsync(string productId, int quantity, string orderId) {
            return base.Channel.AddProductQuantityToOrderAsync(productId, quantity, orderId);
        }
        
        public bool RemoveProductFromOrder(string productId, string orderId) {
            return base.Channel.RemoveProductFromOrder(productId, orderId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveProductFromOrderAsync(string productId, string orderId) {
            return base.Channel.RemoveProductFromOrderAsync(productId, orderId);
        }
        
        public bool SaveOrder(TestApp.OrderServiceRef.Order order) {
            return base.Channel.SaveOrder(order);
        }
        
        public System.Threading.Tasks.Task<bool> SaveOrderAsync(TestApp.OrderServiceRef.Order order) {
            return base.Channel.SaveOrderAsync(order);
        }
    }
}
